/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package projekakhirperpustakaan;
import java.sql.Connection;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.ResultSet;
import java.sql.PreparedStatement;
import java.util.HashMap;
import java.util.Map;
import javax.swing.ImageIcon;

import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ridho
 */
public class panelManBuku extends javax.swing.JPanel {

    /**
     * Creates new form panelManBuku
     */
    public panelManBuku() {
        initComponents();
        load_tbBuku();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        panelRound1 = new test.PanelRound();
        txtPenulis = new javax.swing.JTextField();
        txtJudul = new javax.swing.JTextField();
        txtSinopsis = new javax.swing.JTextField();
        txtStok = new javax.swing.JTextField();
        txtPath1 = new javax.swing.JTextField();
        txtPath2 = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbBukuAdmin = new javax.swing.JTable();
        btnClearFormBuku = new javax.swing.JButton();
        btnTambahBuku = new javax.swing.JButton();
        btnEditBuku = new javax.swing.JButton();
        btnHapusBuku = new javax.swing.JButton();

        setLayout(new java.awt.CardLayout());

        jPanel1.setBackground(new java.awt.Color(137, 168, 178));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Poppins ExtraBold", 0, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Manajemen Buku");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 230, 40));

        panelRound1.setBackground(new java.awt.Color(255, 255, 255));
        panelRound1.setRoundBottomLeft(50);
        panelRound1.setRoundBottomRight(50);
        panelRound1.setRoundTopLeft(50);
        panelRound1.setRoundTopRight(50);

        txtPenulis.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        txtPenulis.setText("Masukkan Nama Penulis Buku !");
        txtPenulis.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPenulisFocusGained(evt);
            }
        });

        txtJudul.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        txtJudul.setText("Masukkan Judul Buku !");
        txtJudul.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtJudulFocusGained(evt);
            }
        });

        txtSinopsis.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        txtSinopsis.setText("Masukkan Sinopsis Buku !");
        txtSinopsis.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSinopsisFocusGained(evt);
            }
        });
        txtSinopsis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSinopsisActionPerformed(evt);
            }
        });

        txtStok.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        txtStok.setText("Masukkan Jumlah Stok Buku !");
        txtStok.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtStokFocusGained(evt);
            }
        });
        txtStok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtStokActionPerformed(evt);
            }
        });

        txtPath1.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        txtPath1.setText("Masukkan Path Assets Buku  ( 133px, 168px )");
        txtPath1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPath1FocusGained(evt);
            }
        });
        txtPath1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPath1ActionPerformed(evt);
            }
        });

        txtPath2.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        txtPath2.setText("Masukkan Path Assets Buku ( 180px, 270px )");
        txtPath2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPath2FocusGained(evt);
            }
        });

        javax.swing.GroupLayout panelRound1Layout = new javax.swing.GroupLayout(panelRound1);
        panelRound1.setLayout(panelRound1Layout);
        panelRound1Layout.setHorizontalGroup(
            panelRound1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRound1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(panelRound1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtPath2, javax.swing.GroupLayout.DEFAULT_SIZE, 440, Short.MAX_VALUE)
                    .addGroup(panelRound1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(txtPath1, javax.swing.GroupLayout.DEFAULT_SIZE, 440, Short.MAX_VALUE)
                        .addComponent(txtStok, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtSinopsis, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtPenulis, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtJudul, javax.swing.GroupLayout.Alignment.LEADING)))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        panelRound1Layout.setVerticalGroup(
            panelRound1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRound1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(txtJudul, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtPenulis, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtSinopsis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtStok, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtPath1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtPath2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        jPanel1.add(panelRound1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, 500, 240));

        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.LINE_AXIS));

        tbBukuAdmin.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        tbBukuAdmin.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbBukuAdmin.setRowHeight(25);
        tbBukuAdmin.setRowMargin(5);
        tbBukuAdmin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbBukuAdminMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbBukuAdmin);

        jPanel2.add(jScrollPane1);

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 290, 710, 210));

        btnClearFormBuku.setFont(new java.awt.Font("Poppins SemiBold", 0, 14)); // NOI18N
        btnClearFormBuku.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/refresh-arrow.png"))); // NOI18N
        btnClearFormBuku.setText("Clear Form");
        btnClearFormBuku.setBorder(null);
        btnClearFormBuku.setBorderPainted(false);
        btnClearFormBuku.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearFormBukuActionPerformed(evt);
            }
        });
        jPanel1.add(btnClearFormBuku, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 180, 140, 30));

        btnTambahBuku.setFont(new java.awt.Font("Poppins SemiBold", 0, 14)); // NOI18N
        btnTambahBuku.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/add.png"))); // NOI18N
        btnTambahBuku.setText("Tambah Buku");
        btnTambahBuku.setBorder(null);
        btnTambahBuku.setBorderPainted(false);
        btnTambahBuku.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTambahBukuActionPerformed(evt);
            }
        });
        jPanel1.add(btnTambahBuku, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 60, 140, 30));

        btnEditBuku.setFont(new java.awt.Font("Poppins SemiBold", 0, 14)); // NOI18N
        btnEditBuku.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/pen.png"))); // NOI18N
        btnEditBuku.setText("Edit Buku");
        btnEditBuku.setBorder(null);
        btnEditBuku.setBorderPainted(false);
        btnEditBuku.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditBukuActionPerformed(evt);
            }
        });
        jPanel1.add(btnEditBuku, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 100, 140, 30));

        btnHapusBuku.setFont(new java.awt.Font("Poppins SemiBold", 0, 14)); // NOI18N
        btnHapusBuku.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/delete.png"))); // NOI18N
        btnHapusBuku.setText("Hapus Buku");
        btnHapusBuku.setBorder(null);
        btnHapusBuku.setBorderPainted(false);
        btnHapusBuku.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHapusBukuActionPerformed(evt);
            }
        });
        jPanel1.add(btnHapusBuku, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 140, 140, 30));

        add(jPanel1, "card2");
    }// </editor-fold>//GEN-END:initComponents
    ImageIcon iconBerhasil = new javax.swing.ImageIcon(getClass().getResource("checked.png"));
    ImageIcon iconGagal = new javax.swing.ImageIcon(getClass().getResource("remove.png"));
    private void txtSinopsisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSinopsisActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSinopsisActionPerformed

    private void txtPath1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPath1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPath1ActionPerformed

    private void btnClearFormBukuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearFormBukuActionPerformed
        // TODO add your handling code here:
        reset();
    }//GEN-LAST:event_btnClearFormBukuActionPerformed

    private void btnTambahBukuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTambahBukuActionPerformed
        String insJudul = txtJudul.getText().trim();
        String insPenulis = txtPenulis.getText().trim();
        String insSinopsis = txtSinopsis.getText().trim();
        String insPath1 = txtPath1.getText().trim();
        String insPath2 = txtPath2.getText().trim();
        int insStok;
        try {
            insStok = Integer.parseInt(txtStok.getText().trim());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Stok harus berupa angka.", "Kesalahan Input woi", JOptionPane.WARNING_MESSAGE,iconGagal);
            return;
        }
        if (insJudul.isEmpty() || insPenulis.isEmpty() || insSinopsis.isEmpty() || insPath1.isEmpty() || insPath2.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Semua kolom harus diisi.", "Kesalahan Input woi", JOptionPane.WARNING_MESSAGE,iconGagal);
            return;
        }
        String sqlCheckDuplicate = "SELECT COUNT(*) FROM buku WHERE judul_buku = ?";
        try {
            java.sql.Connection conn = Koneksi.getKoneksi();
            PreparedStatement stmtCheck = conn.prepareStatement(sqlCheckDuplicate);
            stmtCheck.setString(1, insJudul);
            ResultSet resCheck = stmtCheck.executeQuery();
            
            if (resCheck.next() && resCheck.getInt(1) > 0) {
            JOptionPane.showMessageDialog(this, "Buku dengan judul tersebut sudah ada.", "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;
            }
            else{
                String sqlInsert = "INSERT INTO buku (judul_buku, pengarang, deskripsi, stok, path_gambar, path_gambar2) VALUES (?, ?, ?, ?, ?, ?)";
                try (
                    PreparedStatement stmt = conn.prepareStatement(sqlInsert)) {
                    stmt.setString(1, insJudul);
                    stmt.setString(2, insPenulis);
                    stmt.setString(3, insSinopsis);
                    stmt.setInt(4, insStok);
                    stmt.setString(5, insPath1);
                    stmt.setString(6, insPath2);
                    int rowsAffected = stmt.executeUpdate();
                    if (rowsAffected > 0) {
                        JOptionPane.showMessageDialog(this, "Buku berhasil ditambahkan!", "Sukses", JOptionPane.INFORMATION_MESSAGE,iconBerhasil);
                        load_tbBuku(); 
                    } else {
                        JOptionPane.showMessageDialog(this, "Gagal menambahkan buku.", "Kesalahan", JOptionPane.ERROR_MESSAGE,iconGagal);
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat menambahkan buku: " + e.getMessage(), "Kesalahan", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (Exception e) {
        }
        reset();
        
        
    }//GEN-LAST:event_btnTambahBukuActionPerformed

    private void btnEditBukuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditBukuActionPerformed
        int selectedRow = tbBukuAdmin.getSelectedRow();
        if (selectedRow != -1) {
            String judul = txtJudul.getText().trim();
            Integer idBuku = ID.get(judul);
            if (idBuku == null) {
                JOptionPane.showMessageDialog(this, "ID Buku tidak ditemukan.", "Kesalahan", JOptionPane.ERROR_MESSAGE,iconGagal);
                return;
            }
            String pengarang = txtPenulis.getText().trim();
            String deskripsi = txtSinopsis.getText().trim();
            String stokInput = txtStok.getText().trim();
            int stok;
            try {
                stok = Integer.parseInt(stokInput);
                if (stok <= 0) { 
                    JOptionPane.showMessageDialog(this, "Input Angka tidak valdi.", "Kesalahan Input", JOptionPane.WARNING_MESSAGE,iconGagal);
                    return;
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Stok harus berupa angka yang valid.", "Kesalahan Input", JOptionPane.WARNING_MESSAGE,iconGagal);
                return;
            }
            String pathGambar = txtPath1.getText().trim();
            String pathGambar2 = txtPath2.getText().trim();
            editBuku(idBuku,judul, pengarang, deskripsi, stok, pathGambar,pathGambar2);
            load_tbBuku();
        } else {
            JOptionPane.showMessageDialog(this, "Pilih buku yang ingin diedit.", "Peringatan", JOptionPane.WARNING_MESSAGE);
        }
        reset();
    }//GEN-LAST:event_btnEditBukuActionPerformed

    private void btnHapusBukuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHapusBukuActionPerformed
        int selectedRow = tbBukuAdmin.getSelectedRow();
        if (selectedRow != -1) {
            String judul = tbBukuAdmin.getValueAt(selectedRow, 0).toString();
            Integer idBuku = ID.get(judul);
            if (idBuku == null) {
                JOptionPane.showMessageDialog(this, "ID Buku tidak ditemukan.", "Kesalahan", JOptionPane.ERROR_MESSAGE);
                return;
            }
            int confirm = JOptionPane.showConfirmDialog(this, 
                    "Apakah Anda yakin ingin menghapus buku \"" + judul + "\"?", 
                    "Konfirmasi Penghapusan", 
                    JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                String sql = "DELETE FROM buku WHERE id_buku = ?";
                try (Connection conn = Koneksi.getKoneksi();
                     PreparedStatement stmt = conn.prepareStatement(sql)) {
                    stmt.setInt(1, idBuku);
                    int rowsAffected = stmt.executeUpdate();
                    if (rowsAffected > 0) {
                        JOptionPane.showMessageDialog(this, "Buku berhasil dihapus  :(", "Sukses", JOptionPane.INFORMATION_MESSAGE,iconBerhasil);
                        load_tbBuku();
                    } else {
                        JOptionPane.showMessageDialog(this, "Gagal menghapus buku :)", "Kesalahan", JOptionPane.ERROR_MESSAGE,iconGagal);
                    }
                } catch (SQLException e) {
                   ;
                    JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat menghapus buku: " + e.getMessage(), "Kesalahan", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Pilih buku yang ingin dihapus.", "Peringatan", JOptionPane.WARNING_MESSAGE,iconGagal);
        }
        reset();
    }//GEN-LAST:event_btnHapusBukuActionPerformed

    private void txtJudulFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtJudulFocusGained
        txtJudul.setText("");
    }//GEN-LAST:event_txtJudulFocusGained

    private void txtPenulisFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPenulisFocusGained
         txtPenulis.setText("");
    }//GEN-LAST:event_txtPenulisFocusGained

    private void txtSinopsisFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSinopsisFocusGained
         txtSinopsis.setText("");
    }//GEN-LAST:event_txtSinopsisFocusGained

    private void txtStokFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtStokFocusGained
         txtStok.setText("");
    }//GEN-LAST:event_txtStokFocusGained

    private void txtPath1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPath1FocusGained
         txtPath1.setText("");
    }//GEN-LAST:event_txtPath1FocusGained

    private void txtPath2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPath2FocusGained
         txtPath2.setText("");
    }//GEN-LAST:event_txtPath2FocusGained
    private Map<String, Integer> ID = new HashMap<>();
    private Map<String, String> path1 = new HashMap<>();
    private Map<String, String> path2 = new HashMap<>();
    int idBuku;
    private void tbBukuAdminMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbBukuAdminMouseClicked
        int row = tbBukuAdmin.getSelectedRow();
        if (row != -1) {
            String judul = tbBukuAdmin.getValueAt(row, 0).toString();
            Integer idBuku = ID.get(judul);
            String penulis = tbBukuAdmin.getValueAt(row, 1).toString();
            String sinopsis = tbBukuAdmin.getValueAt(row, 2).toString();
            String valueFromTable = tbBukuAdmin.getValueAt(row, 3).toString();
            int stokBuku = Integer.parseInt(valueFromTable); 
            String selectedPath1 = path1.get(judul);
            String selectedPath2 = path2.get(judul);
            System.out.println(idBuku);
            if (idBuku == null) {
                JOptionPane.showMessageDialog(this, "ID Buku tidak ditemukan.", "Kesalahan", JOptionPane.ERROR_MESSAGE);
                return;
            }
            txtJudul.setText(judul);
            txtPenulis.setText(penulis);
            txtSinopsis.setText(sinopsis);
            txtStok.setText(String.valueOf(stokBuku));
            txtPath1.setText(selectedPath1 != null ? selectedPath1 : "Path1 tidak ditemukan");
            txtPath2.setText(selectedPath2 != null ? selectedPath2 : "Path2 tidak ditemukan");
        }else {
            JOptionPane.showMessageDialog(this, "Pilih buku terlebih dahulu.", "Peringatan", JOptionPane.WARNING_MESSAGE,iconGagal);
        }
    }//GEN-LAST:event_tbBukuAdminMouseClicked

    private void txtStokActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtStokActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtStokActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClearFormBuku;
    private javax.swing.JButton btnEditBuku;
    private javax.swing.JButton btnHapusBuku;
    private javax.swing.JButton btnTambahBuku;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private test.PanelRound panelRound1;
    private javax.swing.JTable tbBukuAdmin;
    private javax.swing.JTextField txtJudul;
    private javax.swing.JTextField txtPath1;
    private javax.swing.JTextField txtPath2;
    private javax.swing.JTextField txtPenulis;
    private javax.swing.JTextField txtSinopsis;
    private javax.swing.JTextField txtStok;
    // End of variables declaration//GEN-END:variables

    private void load_tbBuku() {
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Judul Buku");
        model.addColumn("Penulis Buku");
        model.addColumn("Sinopsis Buku");
        model.addColumn("Stok Buku");
        
        String sql = "select * from buku";
        try {
            java.sql.Connection conn = Koneksi.getKoneksi();
            PreparedStatement stmt = conn.prepareStatement(sql);
            java.sql.ResultSet res = stmt.executeQuery();

            while (res.next()) {
                int id_Buku = res.getInt("id_buku");
                String judulBuku = res.getString("judul_buku");
                String pengarang = res.getString("pengarang");
                String deskripsi = res.getString("deskripsi");
                String pathBuku1 = res.getString("path_gambar");
                String pathBuku2 = res.getString("path_gambar2");
                int stokBuku = res.getInt("stok");             
                path1.put(judulBuku, pathBuku1);
                path2.put(judulBuku, pathBuku2);
                ID.put (judulBuku, id_Buku);
                model.addRow(new Object[]{judulBuku,pengarang,deskripsi,stokBuku});
            }
            tbBukuAdmin.setModel(model);
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Gagal mengambil data buku.");
        }
    }
    private void editBuku(int idBuku,String judul, String pengarang, String deskripsi,int stok,String pathGambar, String pathGambar2) {
        String sql = "UPDATE buku SET judul_buku = ?, pengarang = ?, deskripsi = ?, stok = ?, path_gambar = ?, path_gambar2 = ? WHERE id_buku = ?";
        try (Connection conn = Koneksi.getKoneksi();
            PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, judul);
            stmt.setString(2, pengarang);
            stmt.setString(3, deskripsi);
            stmt.setInt(4, stok);
            stmt.setString(5, pathGambar);
            stmt.setString(6, pathGambar2);
            stmt.setInt(7, idBuku);
            int rowsAffected = stmt.executeUpdate();
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(this, "Buku berhasil diperbarui Kinggg!", "Sukses", JOptionPane.INFORMATION_MESSAGE,iconBerhasil);
            } else {
                JOptionPane.showMessageDialog(this, "Gagal Ngeupdate buku.", "Kesalahan", JOptionPane.ERROR_MESSAGE,iconGagal);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Eror Cik.", "Kesalahan Besar", JOptionPane.ERROR_MESSAGE,iconGagal);
        }
}

    private void reset() {
        txtJudul.setText("Masukkan Judul Buku !");
        txtPenulis.setText("Masukkan Nama Penulis Buku !");
        txtSinopsis.setText("Masukkan Sinopsis Buku !");
        txtStok.setText("Masukkan Jumlah Stok Buku !");
        txtPath1.setText("Masukkan Path Assets Buku  ( 133px, 168px )");
        txtPath2.setText("Masukkan Path Assets Buku ( 180px, 270px )");
    }

    
    
}
