/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package projekakhirperpustakaan;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import javax.swing.ImageIcon;

/**
 *
 * @author Ridho
 */
public class panelSearchBook extends javax.swing.JPanel {

    int userIdActive;
    
    public panelSearchBook(int AUid) {
        this.userIdActive = AUid;
        initComponents();
        showTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        colCari = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbDaftarBuku = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        printJudul = new javax.swing.JLabel();
        printPengarang = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        printSinopsis = new javax.swing.JTextArea();
        btnBookmark = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        printGambar = new javax.swing.JLabel();

        setLayout(new java.awt.CardLayout());

        jPanel1.setBackground(new java.awt.Color(137, 168, 178));

        colCari.setFont(new java.awt.Font("Poppins Light", 0, 12)); // NOI18N
        colCari.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        colCari.setText("Telusuri Buku ( Berdasarkan Judul )");
        colCari.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                colCariFocusGained(evt);
            }
        });
        colCari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colCariActionPerformed(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/search-interface-symbol.png"))); // NOI18N
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });

        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.LINE_AXIS));

        tbDaftarBuku.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        tbDaftarBuku.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Judul Buku", "Penulis"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbDaftarBuku.setRowHeight(30);
        tbDaftarBuku.setRowMargin(5);
        tbDaftarBuku.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbDaftarBukuMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbDaftarBuku);

        jPanel2.add(jScrollPane1);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        printJudul.setFont(new java.awt.Font("Poppins SemiBold", 0, 12)); // NOI18N
        printJudul.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        printJudul.setText("Judul Buku");

        printPengarang.setFont(new java.awt.Font("Poppins SemiBold", 0, 12)); // NOI18N
        printPengarang.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        printPengarang.setText("Penulis Buku");

        printSinopsis.setColumns(20);
        printSinopsis.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        printSinopsis.setLineWrap(true);
        printSinopsis.setRows(5);
        jScrollPane2.setViewportView(printSinopsis);

        btnBookmark.setFont(new java.awt.Font("Poppins", 1, 12)); // NOI18N
        btnBookmark.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/bookmark.png"))); // NOI18N
        btnBookmark.setText("Masukkan Ke BookMark");
        btnBookmark.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBookmarkActionPerformed(evt);
            }
        });

        jPanel4.setLayout(new javax.swing.BoxLayout(jPanel4, javax.swing.BoxLayout.LINE_AXIS));

        printGambar.setText("Gambar.png");
        jPanel4.add(printGambar);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnBookmark, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(115, 115, 115))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 392, Short.MAX_VALUE)
                    .addComponent(printPengarang, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(printJudul, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(151, 151, 151)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                .addGap(149, 149, 149))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(printJudul)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(printPengarang)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnBookmark)
                .addGap(22, 22, 22))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(148, 148, 148)
                        .addComponent(colCari, javax.swing.GroupLayout.PREFERRED_SIZE, 444, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 104, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(19, 19, 19))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(colCari)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(38, 38, 38)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 407, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(20, 20, 20))
        );

        add(jPanel1, "card2");
    }// </editor-fold>//GEN-END:initComponents
ImageIcon iconBerhasil = new javax.swing.ImageIcon(getClass().getResource("checked.png"));
ImageIcon iconGagal = new javax.swing.ImageIcon(getClass().getResource("remove.png"));
    private void colCariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colCariActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_colCariActionPerformed

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        // TODO add your handling code here:
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Judul Buku");
        model.addColumn("Pengarang");
         String kataKunci = colCari.getText().trim();
         if (kataKunci.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Masukkan kata kunci untuk mencari judul buku.", "Peringatan", JOptionPane.WARNING_MESSAGE,iconGagal);
            showTable();
            return;
        }
         try {
             String sql = "SELECT  id_buku,judul_buku, pengarang, deskripsi, path_gambar FROM buku WHERE judul_buku LIKE ?";
             Connection conn = Koneksi.getKoneksi();
             PreparedStatement stmt = conn.prepareStatement(sql);
             stmt.setString(1, "%" + kataKunci + "%");
             ResultSet res = stmt.executeQuery();
             
              while (res.next()) {
                model.addRow(new Object[]{
                    res.getString("judul_buku"),
                    res.getString("pengarang"),
                });
                        }
              tbDaftarBuku.setModel(model);
              if (model.getRowCount() == 0) {
                JOptionPane.showMessageDialog(this, "Buku dengan kata kunci '" + kataKunci + "' tidak ditemukan.", "Informasi", JOptionPane.INFORMATION_MESSAGE,iconGagal);
                showTable();
                }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat mencari buku.", "Kesalahan", JOptionPane.ERROR_MESSAGE,iconGagal);
    }
    }//GEN-LAST:event_jLabel1MouseClicked

    private void btnBookmarkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBookmarkActionPerformed
        int selectedRow = tbDaftarBuku.getSelectedRow();
        if (selectedRow != -1) {
            String judul = tbDaftarBuku.getValueAt(selectedRow, 0).toString();
            Integer bookId = idBukuMap.get(judul);
            Integer userId = userIdActive;    
            if (bookId == null || userId == null) {
                JOptionPane.showMessageDialog(this, "Data buku atau user tidak valid.", "Kesalahan", JOptionPane.ERROR_MESSAGE,iconGagal);
                return;
            }
            String checkSql = "SELECT COUNT(*) FROM bookmarks WHERE user_id = ? AND book_id = ?";
            try (Connection conn = Koneksi.getKoneksi();
                 PreparedStatement stmtCheck = conn.prepareStatement(checkSql)) {
                stmtCheck.setInt(1, userId);
                stmtCheck.setInt(2, bookId);
                ResultSet resCheck = stmtCheck.executeQuery();
                if (resCheck.next() && resCheck.getInt(1) > 0) {
                    JOptionPane.showMessageDialog(this, "Buku sudah dibookmark!", "Informasi", JOptionPane.INFORMATION_MESSAGE,iconBerhasil);
                    return;
                }
                String insertSql = "INSERT INTO bookmarks (user_id, book_id, tgl_buat) VALUES (?, ?, NOW())";
                    try (PreparedStatement stmtInsert = conn.prepareStatement(insertSql)) {
                        stmtInsert.setInt(1, userId);
                        stmtInsert.setInt(2, bookId);
                        int rowsAffected = stmtInsert.executeUpdate();
                        if (rowsAffected > 0) {
                            JOptionPane.showMessageDialog(this, "Buku berhasil disimpan ke bookmark!", "Sukses", JOptionPane.INFORMATION_MESSAGE,iconBerhasil);
                        } else {
                            JOptionPane.showMessageDialog(this, "Gagal menyimpan bookmark.", "Kesalahan", JOptionPane.ERROR_MESSAGE,iconGagal);
                        }
                    } catch (SQLException e) {
                        e.printStackTrace();
                        JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat menyimpan bookmark.", "Kesalahan", JOptionPane.ERROR_MESSAGE,iconGagal);
                    }
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat memeriksa bookmark.", "Kesalahan", JOptionPane.ERROR_MESSAGE,iconGagal);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Pilih buku dari tabel terlebih dahulu.", "Kesalahan", JOptionPane.WARNING_MESSAGE,iconGagal);
        }
        reset();
        
    }//GEN-LAST:event_btnBookmarkActionPerformed
    ImageIcon iconPengembangan = new javax.swing.ImageIcon(getClass().getResource("/gambarBuku/pengembangan.png"));

    private void tbDaftarBukuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbDaftarBukuMouseClicked
        int row = tbDaftarBuku.getSelectedRow();
        if (row != -1) {
            String judul = tbDaftarBuku.getValueAt(row, 0).toString();
            String pengarang = tbDaftarBuku.getValueAt(row, 1).toString();
            Integer idBuku = idBukuMap.get(judul);
            String deskripsi = deskripsiBuku.get(judul);
            String pathGambar = gambarBuku.get(idBuku);
            System.out.println(pathGambar);
            printJudul.setText("Judul: " + judul);
            printPengarang.setText("Penulis: " + pengarang);
            printSinopsis.setText(deskripsi);
            if (pathGambar != null && !pathGambar.isEmpty()) {
                ImageIcon icon = new ImageIcon(pathGambar);
                printGambar.setIcon(icon);
                printGambar.setText("");
            } else {
                printGambar.setIcon(iconPengembangan);
                printGambar.setText("");
                
            }
        }
    }//GEN-LAST:event_tbDaftarBukuMouseClicked

    private void colCariFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_colCariFocusGained
        // TODO add your handling code here:
        colCari.setText("");
    }//GEN-LAST:event_colCariFocusGained


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBookmark;
    private javax.swing.JTextField colCari;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel printGambar;
    private javax.swing.JLabel printJudul;
    private javax.swing.JLabel printPengarang;
    private javax.swing.JTextArea printSinopsis;
    private javax.swing.JTable tbDaftarBuku;
    // End of variables declaration//GEN-END:variables

private Map<Integer, String> gambarBuku = new HashMap<>();
private Map<String, String> deskripsiBuku = new HashMap<>();
private Map<String, Integer> idBukuMap = new HashMap<>();

    private void showTable() {
    DefaultTableModel model = new DefaultTableModel();
    model.addColumn("Judul Buku");
    model.addColumn("Pengarang");
    String sql = "SELECT id_buku ,judul_buku, pengarang,deskripsi, path_gambar FROM buku";
    try {
        java.sql.Connection conn = Koneksi.getKoneksi();
        java.sql.Statement stmt = conn.createStatement();
        java.sql.ResultSet res = stmt.executeQuery(sql);

        while (res.next()) {
             int idBuku = res.getInt("id_buku");
             String judul = res.getString("judul_buku");
             String pengarang = res.getString("pengarang");
             String deskripsi = res.getString("deskripsi");
             String gambar = res.getString("path_gambar");
             
             model.addRow(new Object[]{judul, pengarang});
             gambarBuku.put(idBuku, gambar);
             deskripsiBuku.put (judul , deskripsi);
             idBukuMap.put(judul, idBuku);
        }
        tbDaftarBuku.setModel(model);
        
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Gagal mengambil data buku.");
    }
  }

    private void reset() {
        colCari.setText("Telusuri Buku ( Berdasarkan Judul )");
    }
}
