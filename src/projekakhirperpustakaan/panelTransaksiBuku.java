/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package projekakhirperpustakaan;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import javax.swing.ImageIcon;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ridho
 */
public class panelTransaksiBuku extends javax.swing.JPanel {

    String activeUser;

    /**
     * Creates new form panelTransaksiBuku
     */
    public panelTransaksiBuku(String username) {
        initComponents();
        this.activeUser = username;
        load_username();
        load_judulBuku();
        load_idBuku();
        load_tabelPeminjaman();
        load_tabelPengembalian();
        idUser.setVisible(false);
        idBuku.setVisible(false);
        
    }
    int idPeminjam ;
    int idLoanBook ;
    ImageIcon iconBerhasil = new javax.swing.ImageIcon(getClass().getResource("checked.png"));
    ImageIcon iconGagal = new javax.swing.ImageIcon(getClass().getResource("remove.png"));

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbHasilPinjam = new javax.swing.JTable();
        cbBuku = new javax.swing.JComboBox<>();
        username1 = new javax.swing.JTextField();
        colDurasi = new javax.swing.JTextField();
        idBuku = new javax.swing.JTextField();
        idUser = new javax.swing.JTextField();
        btnPinjam = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbPengembalian = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        lblKembali = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        lblUser = new javax.swing.JLabel();
        lblJudul = new javax.swing.JLabel();
        lblPinjam = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();
        btnRetunBook = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(760, 510));
        setLayout(new java.awt.CardLayout());

        jPanel1.setBackground(new java.awt.Color(137, 168, 178));

        jTabbedPane1.setBackground(new java.awt.Color(137, 168, 178));
        jTabbedPane1.setForeground(new java.awt.Color(255, 255, 255));
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(760, 510));
        jTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane1MouseClicked(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(137, 168, 178));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Poppins SemiBold", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Peminjaman Buku");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 10, 760, -1));

        jPanel4.setLayout(new javax.swing.BoxLayout(jPanel4, javax.swing.BoxLayout.LINE_AXIS));

        tbHasilPinjam.setBackground(new java.awt.Color(137, 168, 178));
        tbHasilPinjam.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        tbHasilPinjam.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Username", "Judul Buku", "Tanggal Pinjam", "Tanggal Pengembalian"
            }
        ));
        jScrollPane1.setViewportView(tbHasilPinjam);

        jPanel4.add(jScrollPane1);

        jPanel2.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 240, 740, 230));

        cbBuku.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        cbBuku.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pilih buku yang ingin dipinjam" }));
        cbBuku.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbBukuItemStateChanged(evt);
            }
        });
        jPanel2.add(cbBuku, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 360, 30));

        username1.setEditable(false);
        username1.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        username1.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        username1.setText("Username");
        username1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                username1ActionPerformed(evt);
            }
        });
        jPanel2.add(username1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 360, 30));

        colDurasi.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        colDurasi.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        colDurasi.setText("Masukkan Durasi Peminjaman");
        colDurasi.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                colDurasiFocusGained(evt);
            }
        });
        colDurasi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colDurasiActionPerformed(evt);
            }
        });
        jPanel2.add(colDurasi, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, 360, 30));

        idBuku.setEditable(false);
        idBuku.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        idBuku.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        idBuku.setText("Id Buku");
        idBuku.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idBukuActionPerformed(evt);
            }
        });
        jPanel2.add(idBuku, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 110, 70, 30));

        idUser.setEditable(false);
        idUser.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        idUser.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        idUser.setText("Id User");
        jPanel2.add(idUser, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 70, 70, 30));

        btnPinjam.setFont(new java.awt.Font("Poppins SemiBold", 0, 14)); // NOI18N
        btnPinjam.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/borrow.png"))); // NOI18N
        btnPinjam.setText("Pinjam Buku");
        btnPinjam.setBorder(null);
        btnPinjam.setIconTextGap(10);
        btnPinjam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPinjamActionPerformed(evt);
            }
        });
        jPanel2.add(btnPinjam, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 190, 180, 40));

        jButton2.setFont(new java.awt.Font("Poppins SemiBold", 0, 14)); // NOI18N
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/refresh-arrow.png"))); // NOI18N
        jButton2.setText("Clear Form");
        jButton2.setBorder(null);
        jButton2.setIconTextGap(10);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 190, 140, 40));

        jLabel4.setFont(new java.awt.Font("Poppins", 0, 10)); // NOI18N
        jLabel4.setText("*Harian ( Jika langsung dikembalikan \" 0 \")");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 210, -1, 30));

        jTabbedPane1.addTab("Pinjam Buku", jPanel2);

        jPanel3.setBackground(new java.awt.Color(137, 168, 178));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Poppins SemiBold", 0, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Pengembalian Buku");
        jPanel3.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 6, 764, -1));

        jPanel5.setLayout(new javax.swing.BoxLayout(jPanel5, javax.swing.BoxLayout.LINE_AXIS));

        tbPengembalian.setBackground(new java.awt.Color(137, 168, 178));
        tbPengembalian.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        tbPengembalian.setForeground(new java.awt.Color(241, 240, 232));
        tbPengembalian.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbPengembalian.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbPengembalianMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tbPengembalian);

        jPanel5.add(jScrollPane2);

        jPanel3.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(14, 233, 736, 236));

        jLabel3.setFont(new java.awt.Font("Poppins SemiBold", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(241, 240, 232));
        jLabel3.setText("Judul Buku ");
        jPanel3.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, -1, -1));

        lblKembali.setFont(new java.awt.Font("Poppins SemiBold", 0, 14)); // NOI18N
        lblKembali.setForeground(new java.awt.Color(241, 240, 232));
        lblKembali.setText(":");
        jPanel3.add(lblKembali, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 150, 400, -1));

        jLabel5.setFont(new java.awt.Font("Poppins SemiBold", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(241, 240, 232));
        jLabel5.setText("Status Peminjaman");
        jPanel3.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 180, -1, -1));

        jLabel6.setFont(new java.awt.Font("Poppins SemiBold", 0, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(241, 240, 232));
        jLabel6.setText("Tanggal Peminjaman");
        jPanel3.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 120, -1, -1));

        jLabel7.setFont(new java.awt.Font("Poppins SemiBold", 0, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(241, 240, 232));
        jLabel7.setText("Peminjam");
        jPanel3.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, -1, -1));

        lblUser.setFont(new java.awt.Font("Poppins SemiBold", 0, 14)); // NOI18N
        lblUser.setForeground(new java.awt.Color(241, 240, 232));
        lblUser.setText(":");
        jPanel3.add(lblUser, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 60, 400, -1));

        lblJudul.setFont(new java.awt.Font("Poppins SemiBold", 0, 14)); // NOI18N
        lblJudul.setForeground(new java.awt.Color(241, 240, 232));
        lblJudul.setText(":");
        jPanel3.add(lblJudul, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 90, 400, -1));

        lblPinjam.setFont(new java.awt.Font("Poppins SemiBold", 0, 14)); // NOI18N
        lblPinjam.setForeground(new java.awt.Color(241, 240, 232));
        lblPinjam.setText(":");
        jPanel3.add(lblPinjam, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 120, 400, -1));

        jLabel8.setFont(new java.awt.Font("Poppins SemiBold", 0, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(241, 240, 232));
        jLabel8.setText("Tenggat Pengembalian");
        jPanel3.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 150, -1, -1));

        lblStatus.setFont(new java.awt.Font("Poppins SemiBold", 0, 14)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(241, 240, 232));
        lblStatus.setText(":");
        jPanel3.add(lblStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 180, 400, -1));

        btnRetunBook.setFont(new java.awt.Font("Poppins SemiBold", 0, 14)); // NOI18N
        btnRetunBook.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/return.png"))); // NOI18N
        btnRetunBook.setText("Kembalikan");
        btnRetunBook.setBorder(null);
        btnRetunBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRetunBookActionPerformed(evt);
            }
        });
        jPanel3.add(btnRetunBook, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 190, 140, 40));

        jTabbedPane1.addTab("Kembalikan Buku", jPanel3);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 770, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 519, Short.MAX_VALUE)
        );

        add(jPanel1, "card2");
    }// </editor-fold>//GEN-END:initComponents

    private void username1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_username1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_username1ActionPerformed

    private void colDurasiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colDurasiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_colDurasiActionPerformed

    private void idBukuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idBukuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idBukuActionPerformed

    private void cbBukuItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbBukuItemStateChanged
        // TODO add your handling code here:
        load_idBuku();
    }//GEN-LAST:event_cbBukuItemStateChanged

    private void btnPinjamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPinjamActionPerformed
        // TODO add your handling code here:
        pinjam();
        load_tabelPeminjaman();
        load_tabelPengembalian();
        reset();
    }//GEN-LAST:event_btnPinjamActionPerformed

    private void tbPengembalianMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbPengembalianMouseClicked
        int row = tbPengembalian.getSelectedRow(); 
        if (row != 0) {
            lblUser.setText(": "+tbPengembalian.getValueAt(row, 1).toString());
            lblJudul.setText(": "+tbPengembalian.getValueAt(row, 2).toString());
            lblPinjam.setText(": "+tbPengembalian.getValueAt(row, 3).toString());
            lblKembali.setText(": "+tbPengembalian.getValueAt(row, 4).toString());
            lblStatus.setText(": "+tbPengembalian.getValueAt(row, 5).toString());
    }//GEN-LAST:event_tbPengembalianMouseClicked
}
    private void btnRetunBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRetunBookActionPerformed
        int selectedRow = tbPengembalian.getSelectedRow();
        if (selectedRow >= 0) {
            int transaksiId = (int) tbPengembalian.getValueAt(selectedRow, 0);
            returnBook(transaksiId);
            load_tabelPengembalian();
            load_tabelPeminjaman();
        } else {
            JOptionPane.showMessageDialog(
                null, 
                "Pilih buku yang ingin dikembalikan.", 
                "Kesalahan", 
                JOptionPane.WARNING_MESSAGE,
                iconGagal
            );
        }
        reset();
    
    }//GEN-LAST:event_btnRetunBookActionPerformed

    private void colDurasiFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_colDurasiFocusGained
        colDurasi.setText("");
    }//GEN-LAST:event_colDurasiFocusGained

    private void jTabbedPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MouseClicked
        // TODO add your handling code here:
        load_tabelPeminjaman();
        load_tabelPengembalian();
    }//GEN-LAST:event_jTabbedPane1MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        reset();
    }//GEN-LAST:event_jButton2ActionPerformed
    private void returnBook(int transaksiId) {
    String sqlSelect = "SELECT t.book_id, t.tgl_kembali FROM tranksaksi t WHERE t.id_transaksi = ?";
    String sqlUpdate = "UPDATE tranksaksi SET status = 'dikembalikan', tgl_kembali = NOW(), denda = ? WHERE id_transaksi = ?";
    String sqlUpdateStok = "UPDATE buku SET stok = stok + 1 WHERE id_buku = ?";
    
    try (Connection conn = Koneksi.getKoneksi();
         PreparedStatement stmtSelect = conn.prepareStatement(sqlSelect);
         PreparedStatement stmtUpdate = conn.prepareStatement(sqlUpdate);
         PreparedStatement stmtUpdateStok = conn.prepareStatement(sqlUpdateStok)) {       
        stmtSelect.setInt(1, transaksiId);
        ResultSet res = stmtSelect.executeQuery();
        if (res.next()) {
            int bookId = res.getInt("book_id");
            java.sql.Date tglJatuhTempo = res.getDate("tgl_kembali");
            if (tglJatuhTempo == null) {
                JOptionPane.showMessageDialog(this, "Tanggal kembali tidak ditemukan.", "Kesalahan", JOptionPane.ERROR_MESSAGE,iconGagal);
                return;
            }
            
            java.sql.Date tglPengembalian = new java.sql.Date(System.currentTimeMillis());
            int denda = hitungDenda(tglJatuhTempo, tglPengembalian);
            
            if (denda > 0) {
                int kembalian = 0;
                while (true) {
                    String input = JOptionPane.showInputDialog(
                        this,
                        "Anda terlambat mengembalikan buku"+"\nDenda Anda: Rp " + denda + "\nMasukkan jumlah pembayaran:",
                        "Pembayaran Denda",
                        JOptionPane.INFORMATION_MESSAGE
                    );
                    if (input == null) {
                        JOptionPane.showMessageDialog(this, "Pengembalian dibatalkan.");
                        return;
                    }
                    try {
                        int pembayaran = Integer.parseInt(input);
                        if (pembayaran < denda) {
                            JOptionPane.showMessageDialog(
                                this,
                                "Uang Anda Kurang...",
                                "Pembayaran Kurang",
                                JOptionPane.WARNING_MESSAGE
                            );
                        } else {
                            stmtUpdate.setInt(1, 0);
                            stmtUpdate.setInt(2, transaksiId);
                            stmtUpdate.executeUpdate();
                            stmtUpdateStok.setInt(1, bookId);
                            stmtUpdateStok.executeUpdate();
                            int setKembalian = pembayaran - denda ;
                            JOptionPane.showMessageDialog(
                                this,
                                "Buku berhasil dikembalikan. Pembayaran diterima: Rp " + pembayaran+" Kembalian : "+setKembalian,
                                "Sukses",
                                JOptionPane.INFORMATION_MESSAGE,iconBerhasil
                                    
                            );
                            break;
                        }
                    } catch (NumberFormatException e) {
                        JOptionPane.showMessageDialog(this, "Masukkan angka yang valid.", "Input Tidak Valid", JOptionPane.ERROR_MESSAGE,iconGagal);
                    }
                }
            } else {
                stmtUpdate.setInt(1, 0);
                stmtUpdate.setInt(2, transaksiId);
                stmtUpdate.executeUpdate();
                stmtUpdateStok.setInt(1, bookId);
                stmtUpdateStok.executeUpdate();
                
                JOptionPane.showMessageDialog(this, "Buku berhasil dikembalikan tanpa denda.", "Sukses", JOptionPane.INFORMATION_MESSAGE,iconBerhasil);
            }
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Kesalahan saat memproses pengembalian.", "Kesalahan", JOptionPane.ERROR_MESSAGE,iconGagal);
    }
}
private int hitungDenda(java.sql.Date tglJatuhTempo, java.sql.Date tglPengembalian) {
    LocalDate jatuhTempo = tglJatuhTempo.toLocalDate();
    LocalDate pengembalian = tglPengembalian.toLocalDate();
    long daysLate = ChronoUnit.DAYS.between(jatuhTempo, pengembalian);
    return daysLate > 0 ? (int) daysLate * 10000 : 0;
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPinjam;
    private javax.swing.JButton btnRetunBook;
    private javax.swing.JComboBox<String> cbBuku;
    private javax.swing.JTextField colDurasi;
    private javax.swing.JTextField idBuku;
    private javax.swing.JTextField idUser;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblJudul;
    private javax.swing.JLabel lblKembali;
    private javax.swing.JLabel lblPinjam;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblUser;
    private javax.swing.JTable tbHasilPinjam;
    private javax.swing.JTable tbPengembalian;
    public javax.swing.JTextField username1;
    // End of variables declaration//GEN-END:variables

    private void load_username() {
     username1.setText(activeUser);
     String sql = "SELECT id FROM user where username = ?";
        try {
            java.sql.Connection conn = Koneksi.getKoneksi();
            java.sql.PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setString(1, activeUser);
            java.sql.ResultSet res = stmt.executeQuery();
            if (res.next()) {
            String userId = res.getString("id"); 
            idUser.setText(userId); 
            idPeminjam = Integer.parseInt(userId);
        } else {
            idUser.setText("Null");}
        } catch (SQLException e) {
            e.printStackTrace();
        }
  
 }

    private void load_judulBuku() {
        String sql = "SELECT judul_buku FROM buku";
    try {
        java.sql.Connection conn = Koneksi.getKoneksi();
        java.sql.Statement stm = conn.createStatement();
        java.sql.ResultSet res = stm.executeQuery(sql);
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
        model.addElement("Pilih Buku");
        while (res.next()) {
            String judul = res.getString("judul_buku");
            model.addElement(judul);
        }
        cbBuku.setModel(model);
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Gagal memuat judul buku: " + e.getMessage());
    }
    }

    private void load_idBuku() {
       String judulTerpilih = cbBuku.getSelectedItem().toString();
       if(judulTerpilih == null || judulTerpilih.equals("Pilih Buku")){
           System.out.println("buku belum dipilih");
           return;
       }else{
           System.out.println(judulTerpilih);
           String sql = "SELECT id_buku FROM buku where judul_buku = ?";
            try {
                java.sql.Connection conn = Koneksi.getKoneksi();
                java.sql.PreparedStatement stmt = conn.prepareStatement(sql);
                stmt.setString(1, judulTerpilih);
                java.sql.ResultSet res = stmt.executeQuery();
                if (res.next()) {
                String bookId = res.getString("id_buku"); 
                idBuku.setText(bookId); 
                idLoanBook = Integer.parseInt(bookId);
            } else {
                idBuku.setText("Null");}
            } catch (SQLException e) {
                e.printStackTrace();
            }
       }
       
    }

    private void pinjam() {
          String judulTerpilih = cbBuku.getSelectedItem().toString();
        if (judulTerpilih == null || judulTerpilih.equals("Pilih Buku")) {
            JOptionPane.showMessageDialog(null, "Pilih Buku Terlebih Dahulu Boss", "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;
        }
        String tenggatPengembalian = colDurasi.getText().trim();
        if (!tenggatPengembalian.matches("^\\d+$")) {
            JOptionPane.showMessageDialog(null, "Durasi Peminjaman hanya boleh berisi angka!", "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;
        }
        try {
            Connection conn = Koneksi.getKoneksi();
            String sqlCheckBorrowed = "SELECT COUNT(*) FROM tranksaksi WHERE user_id = ? AND book_id = ? AND status = 'dipinjam'";
            try (PreparedStatement stmtCheckBorrowed = conn.prepareStatement(sqlCheckBorrowed)) {
                stmtCheckBorrowed.setInt(1, idPeminjam);
                stmtCheckBorrowed.setInt(2, idLoanBook);
                ResultSet resBorrowed = stmtCheckBorrowed.executeQuery();

                if (resBorrowed.next() && resBorrowed.getInt(1) > 0) {
                    JOptionPane.showMessageDialog(null, "Anda sudah meminjam buku ini. Silakan kembalikan terlebih dahulu.", "Peringatan", JOptionPane.WARNING_MESSAGE,iconBerhasil);
                    return;
                }
            }
            String sqlCheckStok = "SELECT stok FROM buku WHERE id_buku = ?";
            try (PreparedStatement stmtCheckStok = conn.prepareStatement(sqlCheckStok)) {
                stmtCheckStok.setInt(1, idLoanBook);
                ResultSet resStok = stmtCheckStok.executeQuery();
                if (resStok.next()) {
                    int stokBuku = resStok.getInt("stok");
                    if (stokBuku > 0) {
                        int durasiPinjam = Integer.parseInt(colDurasi.getText());
                        LocalDate today = LocalDate.now();
                        LocalDate returnDate = today.plusDays(durasiPinjam);
                        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
                        String tanggalPengembalianFix = returnDate.format(formatter);
                        String sqlInsertTransaksi = "INSERT INTO tranksaksi (user_id, book_id, tgl_pinjam, tgl_kembali, status) "
                                + "VALUES (?, ?, NOW(), ?, 'dipinjam')";
                        try (PreparedStatement stmtInsert = conn.prepareStatement(sqlInsertTransaksi)) {
                            stmtInsert.setInt(1, idPeminjam);
                            stmtInsert.setInt(2, idLoanBook);
                            stmtInsert.setString(3, tanggalPengembalianFix);
                            int rowsAffected = stmtInsert.executeUpdate();
                            if (rowsAffected > 0) {
                                String sqlUpdateStok = "UPDATE buku SET stok = stok - 1 WHERE id_buku = ?";
                                try (PreparedStatement stmtUpdateStok = conn.prepareStatement(sqlUpdateStok)) {
                                    stmtUpdateStok.setInt(1, idLoanBook);
                                    stmtUpdateStok.executeUpdate();
                                }
                                JOptionPane.showMessageDialog(null, "Buku berhasil dipinjam. Tanggal pengembalian: " + tanggalPengembalianFix, "Sukses", JOptionPane.INFORMATION_MESSAGE,iconBerhasil);
                            } else {
                                JOptionPane.showMessageDialog(null, "Gagal menyimpan transaksi.", "Kesalahan", JOptionPane.ERROR_MESSAGE,iconGagal);
                            }
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Buku tidak tersedia. Stok kosong.", "Peringatan", JOptionPane.WARNING_MESSAGE,iconGagal);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Buku tidak ditemukan.", "Kesalahan", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Terjadi kesalahan saat memproses transaksi.", "Kesalahan", JOptionPane.ERROR_MESSAGE);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Masukkan durasi peminjaman yang valid.", "Peringatan", JOptionPane.WARNING_MESSAGE);
    }
        
    }
    private void load_tabelPeminjaman() {
     DefaultTableModel model = new DefaultTableModel();
     model.addColumn("Username");
     model.addColumn("Judul Buku");
     model.addColumn("Tanggal Pinjam");
     model.addColumn("Tanggal Kembali");
      try {
            String sql = "SELECT a.username, b.judul_buku, c.tgl_pinjam, c.tgl_kembali FROM tranksaksi c JOIN user a ON c.user_id = a.id JOIN buku b ON c.book_id = b.id_buku WHERE c.user_id = ? AND c.status = 'dipinjam'" ;
            java.sql.Connection conn = (Connection) Koneksi.getKoneksi();
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setInt(1, idPeminjam);
            try (ResultSet res = stmt.executeQuery()) {
                while (res.next()) {
                    model.addRow(new Object[] {
                        res.getString("username"),
                        res.getString("judul_buku"),
                        res.getString("tgl_pinjam"),
                        res.getString("tgl_kembali")
                    });
                }
            }
            tbHasilPinjam.setModel(model);
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Gagal mengambil data transaksi.");
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    private void load_tabelPengembalian() {
     DefaultTableModel model = new DefaultTableModel();
     model.addColumn("ID Peminjaman");
     model.addColumn("Username");
     model.addColumn("Judul Buku");
     model.addColumn("Tanggal Pinjam");
     model.addColumn("Tanggal Kembali");
     model.addColumn("Status Peminjaman");
    
        try {
            String sql = "SELECT c.id_transaksi, a.username, b.judul_buku, c.tgl_pinjam, c.tgl_kembali, c.status "
                       + "FROM tranksaksi c JOIN user a ON c.user_id = a.id JOIN buku b ON c.book_id = b.id_buku "
                       + "WHERE c.user_id = ? AND c.status = 'dipinjam'";
            try (Connection conn = Koneksi.getKoneksi();
                 PreparedStatement stmt = conn.prepareStatement(sql)) {
                stmt.setInt(1, idPeminjam);
                ResultSet res = stmt.executeQuery();
                while (res.next()) {
                    model.addRow(new Object[] {
                        res.getInt("id_transaksi"), 
                        res.getString("username"), 
                        res.getString("judul_buku"), 
                        res.getString("tgl_pinjam"), 
                        res.getString("tgl_kembali"), 
                        res.getString("status")
                    });
                }
                tbPengembalian.setModel(model);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Gagal memuat data pengembalian.", "Kesalahan", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void reset() {
       lblJudul.setText("");
       lblKembali.setText("");
       lblPinjam.setText("");
       lblStatus.setText("");
       lblUser.setText("");
       cbBuku.setSelectedIndex(0);
       colDurasi.setText("Masukkan Durasi Peminjaman");
   }

    
}
